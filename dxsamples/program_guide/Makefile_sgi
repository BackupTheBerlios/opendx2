# You may see undefined symbols if you make hello_loadable. This does
# not mean that the module will not work. These are simply warnings
# about subroutine names which are referenced by the runtime loadable
# module. These subroutines will be found in the running dxexec. 

FILES_HELLO = userhello.o hello.o
FILES_HELLOERR = userhelloerr.o hello_errorchecking.o
FILES_HELLOOUT = outboard.o hello.o 
FILES_HELLOLOAD = hello.o userhello_load.o
FILES_MAKEX = usermakex.o makex.o
FILES_MAKEXEFF = usermakexeff.o makexeff.o
FILES_ADD = useradd.o add.o
FILES_ADD2 = useradd2.o add2.o
FILES_ADD2INV = useradd2inv.o add2invalid.o
FILES_ADDPAR = useraddpar.o add_parallel.o
FILES_AVGCELL = useravgcell.o averagecell.o
FILES_AVGCELLPAR = useravgcellpar.o averagecell_parallel.o
FILES_PICK = userpick.o showpick.o
FILES_ALL = userall.o hello.o hello_errorchecking.o add.o add2.o makex.o makexeff.o averagecell.o showpick.o add_parallel.o add2invalid.o averagecell_parallel.o

BASE = /usr/lpp/dx

CFLAGS = -O -Dsgi -I$(BASE)/include
LIBS     =   -L$(BASE)/lib_sgi -lDX -lsun -lgl_s -ly -ll -lX11 -lm -lmpc
LITELIBS =   -L$(BASE)/lib_sgi -lDXlite -lm
LDLIBFLAGS  =  -Wl,-e,DXEntry,-U,-exported_symbol,DXEntry
SYSLIBS  =   -lm -lc

hello:		$(FILES_HELLO)
		$(CC) $(LDFLAGS) $(FILES_HELLO) $(LIBS) -o dxexec

hello_err:	$(FILES_HELLOERR)
		$(CC) $(LDFLAGS) $(FILES_HELLOERR) $(LIBS) -o dxexec

hello_outboard:	$(FILES_HELLOOUT)
		$(CC) $(FILES_HELLOOUT) $(LITELIBS) -o hello_outboard

hello_loadable:	$(FILES_HELLOLOAD)
		$(CC) $(LDLIBFLAGS) -o hello_loadable userhello_load.o hello.o $(SYSLIBS) 
		@echo Unresolved symbols are OK here.  Some compilers issue warnings
		@echo for symbols which are found in the main dxexec process.

add:		$(FILES_ADD)
		$(CC) $(LDFLAGS) $(FILES_ADD) $(LIBS) -o dxexec

add_par:	$(FILES_ADDPAR)
		$(CC) $(LDFLAGS) $(FILES_ADDPAR) $(LIBS) -o dxexec

add2:		$(FILES_ADD2)
		$(CC) $(LDFLAGS) $(FILES_ADD2) $(LIBS) -o dxexec

add2_inv:	$(FILES_ADD2INV)
		$(CC) $(LDFLAGS) $(FILES_ADD2INV) $(LIBS) -o dxexec

makex:		$(FILES_MAKEX)
		$(CC) $(LDFLAGS) $(FILES_MAKEX) $(LIBS) -o dxexec

makex_eff:	$(FILES_MAKEXEFF)
		$(CC) $(LDFLAGS) $(FILES_MAKEXEFF) $(LIBS) -o dxexec

avgcell:	$(FILES_AVGCELL)
		$(CC) $(LDFLAGS) $(FILES_AVGCELL) $(LIBS) -o dxexec

avgcell_2:	$(FILES_AVGCELL2)
		$(CC) $(LDFLAGS) $(FILES_AVGCELL2) $(LIBS) -o dxexec

avgcell_par:	$(FILES_AVGCELLPAR)
		$(CC) $(LDFLAGS) $(FILES_AVGCELLPAR) $(LIBS) -o dxexec

showpick:	$(FILES_PICK)
		$(CC) $(LDFLAGS) $(FILES_PICK) $(LIBS) -o dxexec

all:		$(FILES_ALL)
		$(CC) $(LDFLAGS) $(FILES_ALL) $(LIBS) -o dxexec


# how to make the outboard main routine - the source is in $(DXROOT)/lib
outboard.o:
	$(CC) $(CFLAGS) -DUSERMODULE=m_Hello -c $(BASE)/lib/outboard.c


# make the user files
userhello.c:		hello.mdf
			$(BASE)/bin/mdf2c hello.mdf > userhello.c

userhelloerr.c:		helloerr.mdf
			$(BASE)/bin/mdf2c helloerr.mdf > userhelloerr.c

userhello_load.c:	hello_loadable.mdf
			$(BASE)/bin/mdf2c -m hello_loadable.mdf > userhello_load.c

useradd.c:		add.mdf
			$(BASE)/bin/mdf2c add.mdf >useradd.c

useradd2.c:		add2.mdf
			$(BASE)/bin/mdf2c add2.mdf >useradd2.c

useradd2inv.c:		add2inv.mdf
			$(BASE)/bin/mdf2c add2inv.mdf >useradd2inv.c

useraddtypes.c:		addtypes.mdf
			$(BASE)/bin/mdf2c addtypes.mdf >useraddtypes.c

usermakex.c:		makex.mdf
			$(BASE)/bin/mdf2c makex.mdf >usermakex.c

usermakexeff.c:		makexeff.mdf
			$(BASE)/bin/mdf2c makexeff.mdf >usermakexeff.c

useravgcell.c:		averagecell.mdf
			$(BASE)/bin/mdf2c averagecell.mdf >useravgcell.c

useravgcell2.c:		averagecell2.mdf
			$(BASE)/bin/mdf2c averagecell2.mdf >useravgcell2.c

useravgcellpar.c:	averagecellpar.mdf
			$(BASE)/bin/mdf2c averagecellpar.mdf >useravgcellpar.c

useraddpar.c:		addpar.mdf
			$(BASE)/bin/mdf2c addpar.mdf >useraddpar.c

userpick.c:		showpick.mdf
			$(BASE)/bin/mdf2c showpick.mdf >userpick.c

userall.c:		all.mdf
			$(BASE)/bin/mdf2c all.mdf >userall.c

