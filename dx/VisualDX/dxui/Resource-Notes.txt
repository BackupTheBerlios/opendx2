// Notes for remembering

CommandInterfaces are interfaces to actual Xm stuff with commands
attached such as button interfaces. This will not be needed. 
Commands on the other hand are since they are used to handle the
undo, etc.


// The following are all the Xrm and resource stuff. 

Xrm Files:

!Application.cpp
!DXApplication.cpp
DXWindow.cpp
DynamicaResource.cpp
!IBMApplication.cpp
ProcessGroupOptionsDialog.cpp
ResourceManager.cpp
SetDecoratorTextDialog.cpp
SetSeparatorAttrDlg.cpp
StandIn.cpp
UIComponent.cpp

All Xrm flags:

//static
//XrmOptionDescRec _IBMOptionList[] =
//{
//    {
1//	"-uiroot",
//	"*UIRoot",
//	XrmoptionSepArg,
//	NULL
//    },
//    {
1//	"-wizard",
//	"*wizard",
//	XrmoptionNoArg,
//	"True"
//    },
//    {
1//	"-dismissedWizards",
//	"*dismissedWizards",
//	XrmoptionSepArg,
//	NULL
//    },
//};

static XrmOptionDescRec opTable[] = {
1{"-exec",	"*exec",	XrmoptionSepArg,	(char *) NULL},
1{"-directory",	"*directory",	XrmoptionSepArg,	(char *) NULL},
1{"-memory",	"*memory",	XrmoptionSepArg,	(char *) NULL},
};


static
XrmOptionDescRec _DXOptionList[] =
{
    {
1	"-directory",
	"*directory",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-edit",
	"*anchorMode",
	XrmoptionNoArg,
 	EDIT_ANCHOR_MODE	
    },
    {
1	"-exec",
	"*executive",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-execute",
	"*executeProgram",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-execute_on_change",
	"*executeOnChange",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-help",
	"*printHelpMessage",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-host",
	"*host",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-image",
	"*anchorMode",
	XrmoptionNoArg,
	IMAGE_ANCHOR_MODE
    },
    {
1	"-kiosk",
	"*anchorMode",
	XrmoptionNoArg,
	MENUBAR_ANCHOR_MODE
    },
    {
1	"-menubar",
	"*anchorMode",
	XrmoptionNoArg,
	MENUBAR_ANCHOR_MODE
    },
    {
1	"-noAnchorAtStartup",
	"*noAnchorAtStartup",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-noConfirmedQuit",
	"*noConfirmedQuit",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-local",
	"*runLocally",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-macros",
	"*macros",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-mdf",
	"*userModuleDescriptionFile",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-metric",
	"*metric",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-dxmdf",
	"*executiveModuleDescriptionFile",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-uimdf",
	"*uiModuleDescriptionFile",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-memory",
	"*memory",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-port",
	"*port",
	XrmoptionSepArg,
	NULL
    },
    {
 1       "-printImageCommand",
        "*printImageCommand",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-printImageFormat",
        "*printImageFormat",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-printImagePageSize",
        "*printImagePageSize",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-printImageSize",
        "*printImageSize",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-printImageResolution",
        "*printImageResolution",
        XrmoptionSepArg,
        NULL
    },
    {
1t	"-program",
	"*program",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-cfg",
	"*cfg",
	XrmoptionSepArg,
	NULL
    },
    {
1        "-saveImageFormat",
        "*saveImageFormat",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-saveImagePageSize",
        "*saveImagePageSize",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-saveImageSize",
        "*saveImageSize",
        XrmoptionSepArg,
        NULL
    },
    {
1        "-saveImageResolution",
        "*saveImageResolution",
        XrmoptionSepArg,
        NULL
    },
    {
1	"-suppress",
	"*suppressStartupWindows",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-uidebug",
	"*debugMode",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-showInstanceNumbers",
	"*showInstanceNumbers",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-uionly",
	"*runUIOnly",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-uimessages",
	"*messages",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-version",
	"*DXVersion",
	XrmoptionNoArg,
	"True"
    },

    //
    // Backdoor switches:
    //
    {
1	"-restrictionLevel",
	"*restrictionLevel",
	XrmoptionSepArg,
	NULL
    },
    {
1	"-appHost",
	"*applicationHost",
	XrmoptionSepArg,
	NULL,
    },
    {
1	"-appPort",
	"*applicationPort",
	XrmoptionSepArg,
	NULL,
    },
    {
1t	"-noDXHelp",
	"*noDXHelp",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noEditorAccess",
	"*noEditorAccess",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-notifySaveNet",
	"*notifySaveNet",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noNetworkExecute",
	"*noNetworkExecute",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noImageRWNetFile",
	"*noImageRWNetFile",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noImageLoad",
	"*noImageLoad",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-limitImageOptions",
	"*limitImageOptions",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-limitedNetFileSelection",// Used to be limitedImageFileSelection
	"*limitedNetFileSelection",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noNetFileSelection",
	"*noNetFileSelection",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noImageSaving",
	"*noImageSaving",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noImagePrinting",
	"*noImagePrinting",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noInteractorEdits",
	"*noInteractorEdits",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noInteractorAttributes",
	"*noInteractorAttributes",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noInteractorMovement",
	"*noInteractorMovement",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-noOpenAllPanels",
	"*noOpenAllPanels",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noPanelAccess",
	"*noPanelAccess",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noPanelOptions",
	"*noPanelOptions",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noPanelEdit",
	"*noPanelEdit",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noRWConfig",
	"*noRWConfig",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noScriptCommands",
	"*noScriptCommands",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noMessageInfoOption",
	"*noMessageInfoOption",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-noMessageWarningOption",
	"*noMessageWarningOption",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noEditorOnError",
	"*noEditorOnError",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noCMapSetNameOption",
	"*noCMapSetNameOption",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noCMapSaveMap",
	"*noCMapSaveMap",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noWindowPlacement",
	"*noWindowPlacement",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-noCMapOpenMap",
	"*noCMapOpenMap",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-netPath",
	"*netPath",
	XrmoptionSepArg,
	NULL,
    },
    {
1t	"-noPGroupAssignment",
	"*noPGroupAssignment",
	XrmoptionNoArg,
	"True"
    },
    {
1	"-warning",
	"*warningEnabled",
	XrmoptionNoArg,
	"False"
    },
    {
1	"-info",
	"*infoEnabled",
	XrmoptionNoArg,
	"False"
    },
    {
1	"-error",
	"*errorEnabled",
	XrmoptionNoArg,
	"False"
    },
    {
1	"-forceNetFileEncryption",
	"*forceNetFileEncryption",
	XrmoptionSepArg,
	NULL	
    },
    {
1	"-cryptKey",
	"*cryptKey",
	XrmoptionSepArg,
	NULL	
    },
    {
1	"-exitAfter",
	"*exitAfter",
	XrmoptionNoArg,
	"True"
    },
    {
1t	"-forceLicense",
	"*forceLicense",
	XrmoptionSepArg,
	NULL,	
    },
    {
1	"-noExecuteMenus",
	"*noExecuteMenus",
	XrmoptionNoArg,
	"True",	
    },
    {
1	"-noConnectionMenus",
	"*noConnectionMenus",
	XrmoptionNoArg,
	"True",	
    },
    {
1	"-noWindowsMenus",
	"*noWindowsMenus",
	XrmoptionNoArg,
	"True",	
    },
    {
1	"-noExitOptions",
	"*noExitOptions",
	XrmoptionNoArg,
	"True",	
    },
    {
1	"-noImageMenus",
	"*noImageMenus",
	XrmoptionNoArg,
	"True",	
    },
    {
1	"-view",
	"*viewDataFile",
	XrmoptionSepArg,
	NULL,
     },
     {
1t       "-noAutoScrollVPE",
       "*autoScrollVPE",
       XrmoptionNoArg,
       "False"
     },
     {
1       "-autoLayoutHeight",
       "*autoLayoutHeight",
       XrmoptionSepArg,
       NULL
     },
     {
1       "-autoLayoutGroupSpacing",
       "*autoLayoutGroupSpacing",
       XrmoptionSepArg,
       NULL
     },
     {
1       "-autoLayoutNodeSpacing",
       "*autoLayoutNodeSpacing",
       XrmoptionSepArg,
       NULL
     },
};

static
XtResource _DXResourceList[] =
{
    {
z        "standInBackground",
        "StandInBackground",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, standInBackground),
        XmRImmediate,
	(XtPointer)"#5F9EA0" // CadetBlue 
    },
    {
z        "executionHighlightForeground",
        "Foreground",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, executionHighlightForeground),
        XmRImmediate,
	(XtPointer)"#00ff7e"
    },
    {
z        "backgroundExecutionForeground",
        "Foreground",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, backgroundExecutionForeground),
        XmRImmediate,
	(XtPointer)"#7e7eb4"
    },
    {
z        "errorHighlightForeground",
        "Foreground",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, errorNodeForeground),
        XmRImmediate,
	(XtPointer)"#ff9b00"
    },
    {
z        "foreground",
        "Foreground",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, foreground),
        XmRImmediate,
	(XtPointer)"Black"
    },
    {
z        "background",
        "Background",
        XmRPixel,
        sizeof(Pixel),
	XtOffset(DXResource*, background),
        XmRImmediate,
	(XtPointer)"#b4b4b4"
    },
    {
z        "InsensitiveColor",
        "Color",
        XmRPixel,
        sizeof(Pixel),
        XtOffset(DXResource*, insensitiveColor),
        XmRString,
        (XtPointer)"#888888"
    },
    {
z	"anchorMode",
	"AnchorMode",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, anchorMode),
	XmRString,
	(XtPointer)EDIT_ANCHOR_MODE
    },
    {
z	"DXVersion",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, echoVersion),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"debugMode",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, debugMode),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"showInstanceNumbers",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, showInstanceNumbers),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"directory",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, workingDirectory),
	XmRString,
	NULL
    },
    {
z	"executive",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, executive),
	XmRString,
	NULL
    },
    {
z	"executeProgram",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, executeProgram),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"executeOnChange",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, executeOnChange),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"printHelpMessage",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, showHelpMessage),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"host",
	"Host",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, server),
	XmRString,
	NULL
    },
    {
z	"noAnchorAtStartup",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noAnchorAtStartup),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noConfirmedQuit",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noConfirmedQuit),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"macros",
	"Searchlist",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, macros),
	XmRString,
	NULL
    },
    {
z	"memory",
	"Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, memorySize),
	XmRInt,
	0
    },
    {
z	"metric",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, isMetric),
	XmRBoolean,
	(XtPointer)False	
    },
    {
z	"messages",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, errorPath),
	XmRString,
	NULL
    },
    {
z	"port",
	"Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, port),
	XmRInt,
	0
    },
    {
z        "printImageCommand",
        "PrintCommand",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, printImageCommand),
        XmRString,
        (XtPointer) "lpr"
    },
    {
z        "printImageFormat",
        "ImageFileFormat",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, printImageFormat),
        XmRString,
        (XtPointer) "PSCOLOR"
    },
    {
z        "printImagePageSize",
        "ImagePageSize",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, printImagePageSize),
        XmRString,
        NULL 
    },
    {
z        "printImageSize",
        "ImageSize",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, printImageSize),
        XmRString,
       	NULL 
    },
    {
z        "printImageResolution",
        "ImageResolution",
        XmRInt,
        sizeof(int),
        XtOffset(DXResource*, printImageResolution),
	XmRImmediate,
	(XtPointer)0	// This is 0 (not 300) so that PrintImageDialog can
			// tell if the user specified this option/resource
    },
    {
z	"program",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, program),
	XmRString,
	NULL
    },
    {
z	"cfg",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, cfgfile),
	XmRString,
	NULL
    },
    {
z	"runLocally",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, runLocally),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"runUIOnly",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, runUIOnly),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "saveImageFormat",
        "ImageFileFormat",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, saveImageFormat),
        XmRString,
       	NULL, 		// This is NULL (not "PSCOLOR")  so that 
			// SaveImageDialog can tell if the user 
			// specified this option/resource
    },
    {
 z       "saveImagePageSize",
        "ImagePageSize",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, saveImagePageSize),
        XmRString,
       	NULL, 		// This is NULL (not "8.5x11")  so that 
			// SaveImageDialog can tell if the user 
			// specified this option/resource
    },
    {
z        "saveImageSize",
        "ImageSize",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, saveImageSize),
        XmRString,
       	NULL, 		
    },
    {
z        "saveImageResolution",
        "ImageResolution",
        XmRInt,
        sizeof(int),
        XtOffset(DXResource*, saveImageResolution),
	XmRImmediate,
	(XtPointer)0	// This is 0 (not 300) so that SaveImageDialog can
			// tell if the user specified this option/resource
    },
    {
z	"suppressStartupWindows",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, suppressStartupWindows),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"userModuleDescriptionFile",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, userModules),
	XmRString,
	NULL
    },
    {
z	"executiveModuleDescriptionFile",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, executiveModule),
	XmRString,
	NULL
    },
    {
z	"uiModuleDescriptionFile",
	"Pathname",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, uiModule),
	XmRString,
	NULL
    },
    {
z        "noWindowPlacement",
        "WindowPlacement",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noWindowPlacement),
	XmRImmediate,
	(XtPointer)False	
    },

    /*
     * Backdoor resources:
     */
    {
z	"restrictionLevel",
	"Restriction",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, restrictionLevel),
	XmRString,
	NULL
    },
    {
z	"noRWConfig",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noRWConfig),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noPanelEdit",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noPanelEdit),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noInteractorEdits",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noInteractorEdits),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noInteractorAttributes",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noInteractorAttributes),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noInteractorMovement",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noInteractorMovement),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noOpenAllPanels",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noOpenAllPanels),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noPanelAccess",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noPanelAccess),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noPanelOptions",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noPanelOptions),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noMessageInfoOption",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noMessageInfoOption),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noMessageWarningOption",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noMessageWarningOption),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noEditorOnError",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noEditorOnError),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noScriptCommands",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noScriptCommands),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noPGroupAssignment",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noPGroupAssignment),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noImageRWNetFile",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noImageRWNetFile),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"limitedNetFileSelection",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, limitedNetFileSelection),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "netPath",
        "NetPath",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, netPath),
	XmRString,
	NULL
    },
    {
z	"noImageLoad",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noImageLoad),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noImageSaving",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noImageSaving),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noImagePrinting",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noImagePrinting),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"limitImageOptions",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, limitImageOptions),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "notifySaveNet",
        "Flag",
        XmRBoolean,
        sizeof(Boolean),
        XtOffset(DXResource*, notifySaveNet),
        XmRImmediate,
        (XtPointer)False
    },
    {
z        "noNetworkExecute",
        "Flag",
        XmRBoolean,
        sizeof(Boolean),
        XtOffset(DXResource*, noNetworkExecute),
        XmRImmediate,
        (XtPointer)False
    },
    {
z	"noEditorAccess",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noEditorAccess),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noDXHelp",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noDXHelp),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noCMapSetNameOption",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noCMapSetNameOption),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noCMapOpenMap",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noCMapOpenMap),
	XmRImmediate,
	(XtPointer)False
    },
    {
z	"noCMapSaveMap",
	"Flag",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noCMapSaveMap),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "applicationPort",
        "Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, applicationPort),
	XmRInt,
	NULL
    },
    {
z        "applicationHost",
        "ApplicationHost",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, applicationHost),
	XmRString,
	NULL
    },
    {
z        "infoEnabled",
        "InfoEnabled",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, infoEnabled),
	XmRImmediate,
	(XtPointer)True
    },
    {
z        "warningEnabled",
        "WarningEnabled",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, warningEnabled),
	XmRImmediate,
	(XtPointer)True
    },
    {
z        "errorEnabled",
        "ErrorEnabled",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, errorEnabled),
	XmRImmediate,
	(XtPointer)True
    },
    {
z        "moduleInfoOpensMessage",
        "ModuleInfoOpensMessage",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, moduleInfoOpensMessage),
	XmRImmediate,
	(XtPointer)True
    },
    {
z        "infoOpensMessage",
        "InfoOpensMessage",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, infoOpensMessage),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "warningOpensMessage",
        "WarningOpensMessage",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, warningOpensMessage),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "errorOpensMessage",
        "ErrorOpensMessage",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, errorOpensMessage),
	XmRImmediate,
	(XtPointer)True
    },
    {
 z       "useWindowSpecs",
        "UseWindowSpecs",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, useWindowSpecs),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "forceNetFileEncryption",
        "ForceNetFileEncryption",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, forceNetFileEncryption),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "cryptKey",
        "Cryptkey",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, cryptKey),
        XmRString,
        NULL
    },
    {
z        "exitAfter",
        "ExitAfter",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, exitAfter),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "forceLicense",
        "License",
        XmRString,
        sizeof(String),
        XtOffset(DXResource*, forceFunctionalLicense),
        XmRString,
        NULL
    },
    {
 z       "noExecuteMenus",
        "NoExecuteMenus",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noExecuteMenus),
	XmRImmediate,
	(XtPointer)False
    },
    {
 z       "noConnectionMenus",
        "NoConnectionMenus",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noConnectionMenus),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "noWindowsMenus",
        "NoWindowsMenus",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noWindowsMenus),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "noExitOptions",
        "NoExitOptions",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noExitOptions),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "noImageMenus",
        "NoMenus",
	XmRBoolean,
	sizeof(Boolean),
	XtOffset(DXResource*, noImageMenus),
	XmRImmediate,
	(XtPointer)False
    },
    {
z        "oemApplicationName",
        "ApplicationName",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, oemApplicationName),
	XmRString,
	NULL
    },
    {
z        "oemApplicationNameCode",
        "ApplicationNameCode",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, oemApplicationNameCode),
	XmRString,
	NULL
    },
    {
z        "oemLicenseCode",
        "LicenseCode",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, oemLicenseCode),
	XmRString,
	NULL
    },
    {
z        "viewDataFile",
        "ViewDataFile",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, viewDataFile),
	XmRString,
	NULL
    },
     {
z       "autoScrollVPE",
       "Flag",
       XmRBoolean,
       sizeof(Boolean),
       XtOffset(DXResource*, autoScrollVPEInitVal),
       XmRImmediate,
       (XtPointer)True
     },
    {
z	"autoLayoutHeight",
	"Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, autoLayoutHeight),
	XmRInt,
	0
    },
    {
z	"autoLayoutGroupSpacing",
	"Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, autoLayoutGroupSpacing),
	XmRInt,
	0
    },
    {
z	"autoLayoutNodeSpacing",
	"Number",
	XmRInt,
	sizeof(int),
	XtOffset(DXResource*, autoLayoutNodeSpacing),
	XmRInt,
	0
    },
     //
     // For java
     //
    {
z        "cosmoDir",
        "CosmoDir",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, cosmoDir),
	XmRString,
	(XtPointer) ""
    },
    {
z        "jdkDir",
        "JdkDir",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, jdkDir),
	XmRString,
	(XtPointer) ""
    },
    {
z        "htmlDir",
        "HtmlDir",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, htmlDir),
	XmRString,
	(XtPointer) ""
    },
    {
z        "serverDir",
        "ServerDir",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, serverDir),
	XmRString,
	(XtPointer) ""
    },
    {
z        "dxJarFile",
        "DxJarFile",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, dxJarFile),
	XmRString,
	(XtPointer) ""
    },
    {
z        "userHtmlDir",
        "UserHtmlDir",
	XmRString,
	sizeof(String),
	XtOffset(DXResource*, userHtmlDir),
	XmRString,
	(XtPointer) "user"
    },
};

//static
//XtResource _IBMResourceList[] =
//{
//    {
//	"UIRoot",
//	"Pathname",
//	XmRString,
//	sizeof(String),
//	XtOffset(IBMResource*, UIRoot),
//	XmRString,
//	NULL
//    },
//    {
//	"wizard",
//	"Flag",
//	XmRBoolean,
//	sizeof(Boolean),
//	XtOffset(IBMResource*, wizard),
//	XmRImmediate,
//	(XtPointer)False
//    },
//    {
//	"dismissedWizards",
//	"Pathname",
//	XmRString,
//	sizeof(String),
//	XtOffset(IBMResource*, noWizardNames),
//	XmRString,
//	(XtPointer)NULL
//    },
//
//};

//const String IBMApplication::DefaultResources[] =
//{
//    "*background:              #b4b4b4b4b4b4",
//    "*foreground:              black",
//#if defined(DXD_OS_NON_UNIX)
//    "*fontList:\
//-adobe-helvetica-bold-r-normal--12-*iso8859-1=bold,\
//-adobe-helvetica-bold-r-normal--14-*iso8859-1=canvas,\
//-adobe-helvetica-bold-r-normal--10-*=small_bold,\
//-adobe-helvetica-bold-r-normal--12-*=small_canvas,\
//-adobe-helvetica-bold-r-normal--14-*=big_bold,\
//-adobe-helvetica-bold-r-normal--20-*=huge_bold,\
//-adobe-helvetica-medium-r-normal--12-*=normal,\
//-adobe-helvetica-medium-r-normal--10-*=small_normal,\
//-adobe-helvetica-medium-r-normal--14-*=big_normal,\
//-adobe-helvetica-medium-r-normal--20-*=huge_normal,\
//-adobe-helvetica-medium-o-normal--10-*=small_oblique,\
//-adobe-helvetica-medium-o-normal--14-*=big_oblique,\
//-adobe-helvetica-medium-o-normal--20-*=huge_oblique,\
//-adobe-helvetica-medium-o-normal--12-*=oblique",
//#else
//    "*fontList:\
//-adobe-helvetica-bold-r-normal--12-*iso8859-1=bold,\
//-adobe-helvetica-bold-r-normal--14-*iso8859-1=canvas,\
//-adobe-helvetica-bold-r-normal--10-*iso8859-1=small_bold,\
//-adobe-helvetica-bold-r-normal--12-*iso8859-1=small_canvas,\
//-adobe-helvetica-bold-r-normal--14-*iso8859-1=big_bold,\
//-adobe-helvetica-bold-r-normal--20-*iso8859-1=huge_bold,\
//-adobe-helvetica-medium-r-normal--12-*iso8859-1=normal,\
//-adobe-helvetica-medium-r-normal--10-*iso8859-1=small_normal,\
//-adobe-helvetica-medium-r-normal--14-*iso8859-1=big_normal,\
//-adobe-helvetica-medium-r-normal--20-*iso8859-1=huge_normal,\
//-adobe-helvetica-medium-o-normal--10-*iso8859-1=small_oblique,\
//-adobe-helvetica-medium-o-normal--14-*iso8859-1=big_oblique,\
//-adobe-helvetica-medium-o-normal--20-*iso8859-1=huge_oblique,\
//-adobe-helvetica-medium-o-normal--12-*iso8859-1=oblique",
//#endif
//    "*keyboardFocusPolicy:     explicit",
//    "*highlightOnEnter:	       false",
//    "*highlightThickness:      0",
//    "*XmPushButton*traversalOn:    false",
//    "*XmPushButtonGadget*traversalOn:    false",
//    "*XmToggleButton*traversalOn:  false",
//    "*XmDial*width:                100",
//    "*XmDial*height:	           100",
//    "*XmDial*numMarkers:           60",
//    "*XmDial*majorMarkerWidth:     10",
//    "*XmDial*minorMarkerWidth:     5",
//    "*XmDial*majorPosition:        5",
//    "*XmDial*startingMarkerPos:    0",
//    "*XmDial*shadePercentShadow:   0",
//    "*XmDial*shading:              True",
//    "*XmDial*shadowThickness:      0",
//    "*XmDial*shadeIncreasingColor: #b4b4c9c9dddd",
//    "*XmDial*shadeDecreasingColor: #7e7e7e7eb4b4",
//    "*XmDial*majorMarkerColor:     Black",
//    "*XmDial*minorMarkerColor:     Black",
//    "*XmDial*indicatorColor:       Black",
//    "*XmDial*indicatorWidth:       20",
//
//    "*XmNumber.navigationType:     XmTAB_GROUP",
//
//    "*XmScrollBar*foreground:      #b4b4b4b4b4b4",
//
//    "*XmSlideBar*alignOnDrop:      True",
//
//    "*XmToggleButton.selectColor:  #5F9EA0",
//    "*XmToggleButton.indicatorSize:15",
//
//    "*XmArrowButton.shadowThickness:         1",
//    "*XmCascadeButton.shadowThickness:       1",
//    "*XmCascadeButtonGadget.shadowThickness: 1",
//    "*XmColorMapEditor*shadowThickness:      1",
//    "*XmDrawnButton.shadowThickness:         1",
//    "*XmForm.shadowThickness:                0",
//    "*XmFrame.shadowThickness:               1",
//    "*XmList.shadowThickness:                1",
//    "*XmMenuBar.shadowThickness:             1",
//    "*XmNumber*shadowThickness:              1",
//    "*XmPushButton.shadowThickness:          1",
//    "*XmPushButtonGadget.shadowThickness:    1",
//    "*XmRowColumn.shadowThickness:           1",
//    "*XmScrollBar.shadowThickness:           1",
//    "*XmScrolledList.shadowThickness:        1",
//    "*XmScrolledWindow.shadowThickness:      1",
//    "*XmText.shadowThickness:                1",
//    "*XmTextField.shadowThickness:           1",
//    "*XmToggleButton.shadowThickness:        1",
//    NULL
//};

//static
//const String _defaultDXResources[] =
//{
//    "*quitOption.labelString:                Quit",
//    "*quitOption.mnemonic:                   Q",
//    "*quitOption.accelerator:                Ctrl<Key>Q",
//    "*quitOption.acceleratorText:            Ctrl+Q",
//    "*standInBackground:              #5F9EA0", // CadetBlue 
//    "*executionHighlightForeground:   #00ff7e",
//    "*backgroundExecutionForeground:  #7e7eb4",
//    "*errorHighlightForeground:       #ff9b00",
//    "*InsensitiveColor:     #888888",
//
//// purify <explitive deleted> the bed because of this
////    "*tearOffModel:			     XmTEAR_OFF_ENABLED",
//    NULL
//};

String DXWindow::DefaultResources[] =
//{
//    "*executeMenu.labelString:                    	Execute",
//    "*executeMenu.mnemonic:                       	x",
//    "*executeOnceOption.labelString:              	Execute Once",
//    "*executeOnceOption.mnemonic:                 	O",
//    "*executeOnceOption.accelerator:              	Ctrl<Key>E",
//    "*executeOnceOption.acceleratorText:          	Ctrl+E",
//    "*executeOnChangeOption.labelString:          	Execute on Change",
//    "*executeOnChangeOption.mnemonic:             	C",
//    "*executeOnChangeOption.accelerator:          	Ctrl<Key>semicolon",
//    "*executeOnChangeOption.acceleratorText:      	Ctrl+;",
//    "*endExecutionOption.labelString:             	End Execution",
//    "*endExecutionOption.mnemonic:                	E",
//// Switched to using osfEndLine for the accelerator instead of End
//// because of problems on osf1.  Motif libs on (ARCH?) can't deal with
//// an osf key name as an accelerator.
//#if defined(aviion)
//    "*endExecutionOption.accelerator:             Ctrl<Key>End",
//    "*endExecutionOption.acceleratorText:         Ctrl+End",
//#elif defined(macos)
//    "*endExecutionOption.accelerator:			Ctrl <Key>period",
//    "*endExecutionOption.acceleratorText:		Ctrl+.",
//#else
//    "*endExecutionOption.accelerator:             	Ctrl<Key>osfEndLine",
//    "*endExecutionOption.acceleratorText:         	Ctrl+End",
//#endif
//    "*sequencerOption.labelString:                	Sequencer",
//    "*sequencerOption.mnemonic:                   	S",
//
//#if USE_REMAP	// 6/14/93
//    "*remapInteractorOutputsOption.labelString:   Remap Interactor Outputs", 
//    "*remapInteractorOutputsOption.mnemonic:      R",
//#endif
//
//    "*connectionMenu.labelString:                 	Connection",
//    "*connectionMenu.mnemonic:                    	C",
//    "*startServerOption.labelString:              	Start Server...",
//    "*startServerOption.mnemonic:                 	S",
//    "*disconnectFromServerOption.labelString:     	Disconnect from Server",
//    "*disconnectFromServerOption.mnemonic:        	D",
//    "*resetServerOption.labelString:              	Reset Server",
//    "*resetServerOption.mnemonic:                 	R",
//    "*resetServerOption.accelerator:			Ctrl Shift <Key>R",
//    "*resetServerOption.acceleratorText:		Ctrl+Shift+R",
//    "*processGroupAssignmentOption.labelString:   	Execution Group Assignment...",
//    "*processGroupAssignmentOption.mnemonic:      	P",
//
//    "*helpTutorialOption.labelString:             	Tutorial...",
//    "*helpTutorialOption.mnemonic:                	u",
//
//    "*toggleWindowStartupOption.labelString:      	Startup Window",
//    "*toggleWindowStartupOption.mnemonic:         	S",
//
//    "*connectionMenuPulldown.tearOffModel:	  XmTEAR_OFF_DISABLED",
//
//    "*fileHistory.labelString:			  Recent Programs",
//
//    NULL
//};

Example xml preference file.
