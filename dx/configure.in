#include "aclocal.m4"

dnl Start of configuration ----

AC_SUBST(YACC)
AC_SUBST(SHELL)
AC_SUBST(ARCH)
AC_SUBST(EXEEXT)
AC_SUBST(OBJEXT)
AC_SUBST(DOT_EXE_EXT)
AC_SUBST(INSTALL_DX_EXE)
AC_SUBST(INSTALL_DX_CSH)
AC_SUBST(INSTALL_SCRIPT)
AC_SUBST(FMT_LIBS)
AC_SUBST(LIBS)
AC_SUBST(JAVABRANCH)
AC_SUBST(JAVAC)
AC_SUBST(JAR)
AC_SUBST(JAVAH)
AC_SUBST(JINC)
AC_SUBST(JNI_CFLAGS)
AC_SUBST(JDK_CLASSPATH)
AC_SUBST(WRL_CLASSPATH)
AC_SUBST(BUILDBASE)
AC_SUBST(DXEXEC_EXP)
AC_SUBST(DXEXEC_IMP)
AC_SUBST(VERSION_STRING)
AC_SUBST(ANYDX)
AC_SUBST(DXABI)
AC_SUBST(DX_RTL_CFLAGS)
AC_SUBST(DX_RTL_LDFLAGS)
AC_SUBST(DX_RTL_SYSLIBS)
AC_SUBST(DX_OUTBOARD_LIBS)
AC_SUBST(DX_X_LINK_LIBS)
AC_SUBST(DX_GL_LINK_LIBS)
AC_SUBST(SHARED_LINK)
AC_SUBST(MKDEP)
AC_SUBST(JNI_CFLAGS)
AC_SUBST(JDK_CLASSPATH)
AC_SUBST(WRL_CLASSPATH)

SHELL=sh

INSTALL_SCRIPT='$(INSTALL)'

BUILDBASE=`pwd`

dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/dx/arch.h)
AM_CONFIG_HEADER(include/dxconfig.h)
AM_INIT_AUTOMAKE(dx, 4.1.1)

VERSION_STRING="04.1.0001"
AC_DEFINE(DXD_VERSION_STRING, "04.1.0001")
AC_DEFINE(DXD_COPYRIGHT_STRING,
  ["Open Visualization Data Explorer\nMore Info at www.research.ibm.com/dx\nand www.opendx.org\nVersion - 4.1.0"])
AC_DEFINE_UNQUOTED(DXD_VERSION, 4)
AC_DEFINE_UNQUOTED(DXD_RELEASE, 1)
AC_DEFINE_UNQUOTED(DXD_MODIFICATION, 1)


dnl First set up all the possible configure command line options
dnl

dnl Since building the libs for all the formats and DX stuff takes so long
dnl this allows you to disable it while developing/extending dx.
AC_ARG_ENABLE(buildlibdx,
	      [  --enable-buildlibdx     enable building libDX.a (default is yes)],
	      [with_buildlibdx=$enableval],
	      [with_buildlibdx='yes'])

dnl This allows you to disable installing the dx html documentation.
AC_ARG_ENABLE(installhtml,
	      [  --enable-installhtml    enable install of html docs (default is yes)],
	      [with_installhtml=$enableval],
	      [with_installhtml='yes'])

dnl Get configuration of ImageMagick
# Enable sfio stdio support
AC_ARG_ENABLE(sfio,
	      [  --enable-sfio           enable sfio-based stdio support (default is no)],
	      [with_sfio=$enableval],
	      [with_sfio='no'])

# Enable BZLIB (bzip2 library)
AC_ARG_WITH(bzlib,
	      [  --with-bzlib            enable BZLIB (default is yes)],
	      [with_bzlib=$withval],
	      [with_bzlib='yes'])

# Enable Display Postscript.
AC_ARG_WITH(dps,
	      [  --with-dps              enable Display Postscript (default is yes)],
	      [with_dps=$withval],
	      [with_dps='yes'])

# Enable FlashPIX.
AC_ARG_WITH(fpx,
	      [  --with-fpx              enable FlashPIX (default is yes)],
	      [with_fpx=$withval],
	      [with_fpx='yes'])

# Enable HDF.
AC_ARG_WITH(hdf,
	      [  --with-hdf              enable HDF (default is yes)],
	      [with_hdf=$withval],
	      [with_hdf='yes'])

# Enable JBIG.
AC_ARG_WITH(jbig,
	      [  --with-jbig             enable JBIG (default is yes)],
	      [with_jbig=$withval],
	      [with_jbig='yes'])

# Enable JPEG.
AC_ARG_WITH(jpeg,
	      [  --with-jpeg             enable JPEG (default is yes)],
	      [with_jpeg=$withval],
	      [with_jpeg='yes'])

# Enable PNG.
AC_ARG_WITH(png,
	      [  --with-png              enable PNG (default is yes)],
	      [with_png=$withval],
	      [with_png='yes'])

# Enable TIFF.
AC_ARG_WITH(tiff,
	      [  --with-tiff             enable TIFF (default is yes)],
	      [with_tiff=$withval],
	      [with_tiff='yes'])

# Enable TTF.
AC_ARG_WITH(ttf,
	      [  --with-ttf              enable TrueType (default is yes)],
	      [with_ttf=$withval],
	      [with_ttf='yes'])

# Set default TrueType font path
AC_ARG_WITH(ttf-fontpath,
	      [  --with-ttf-fontpath     set default TrueType font path (default none)],
	      [with_ttf_fontpath=$withval],
	      [with_ttf_fontpath=''])
if test "$with_ttf_fontpath" != "yes" && test -z "$with_ttf_fontpath"
then
  with_ttf_fontpath=''
else
  AC_DEFINE_UNQUOTED(TT_FONT_PATH,"$with_ttf_fontpath")
fi

AC_ARG_WITH(zlib,
	      [  --with-zlib             enable ZLIB (default is yes)],
	      [with_zlib=$withval],
	      [with_zlib='yes'])

AC_ARG_WITH(magick,
	      [  --with-magick           enable ImageMagick (default is yes)],
	      [with_magick=$withval],
	      [with_magick='yes'])

# Enable CDF.
AC_ARG_WITH(cdf,
	      [  --with-cdf              enable CDF (default is yes)],
	      [with_cdf=$withval],
	      [with_cdf='yes'])

# Enable NetCDF.
AC_ARG_WITH(netcdf,
	      [  --with-netcdf           enable NetCDF (default is yes)],
	      [with_netcdf=$withval],
	      [with_netcdf='yes'])

AC_ARG_WITH(javadx,
	      [  --with-javadx           enable JAVADX (default is yes)],
	      [with_javadx=$withval],
	      [with_javadx='yes'])

AC_ARG_WITH(jni-path,
	      [  --with-jni-path         java jni include search path (default none)],
	      [with_jni_path=$withval],
	      [with_jni_path=''])
if test "$with_jni_path" = "yes"
then
  with_jni_path=''
fi

AC_ARG_WITH(java40jar-path,
	      [  --with-java40jar-path   set path to Netscape's java40.jar (default none)],
	      [with_java40jar_path=$withval],
	      [with_java40jar_path=''])
if test "$with_java40jar_path" != "yes" && test -z "$with_java40jar_path"
then
  with_java40jar_path=''
fi

AC_ARG_WITH(cosmojar-path,
	      [  --with-cosmojar-path    set path to Cosmo's npcosmop211.jar (default none)],
	      [with_cosmojar_path=$withval],
	      [with_cosmojar_path=''])
if test "$with_cosmojar_path" != "yes" && test -z "$with_cosmojar_path"
then
  with_cosmojar_path=''
fi


dnl End of command line options configuration

dnl Start DX configuration
DX_ARCHITECTURE
DX_ARCH_SPECIFIC

if test "$ARCH" = "sgi" ; then
    if test "$DXABI" = "" ; then
	DXABI=" -n32 -L/usr/lib32"
    fi
fi

if test "$MKDEP" = "" ; then
    MKDEP='$(CC) -M -MG $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)'
fi

AC_CHECK_PROG(HAVE_CSH, csh, 1, 0)
	
if test "$HAVE_CSH" = "1" ; then
    INSTALL_DX_EXE=
    INSTALL_DX_CSH="dx dxworker"
else
    INSTALL_DX_EXE=dx
    INSTALL_DX_CSH=
fi

AC_PROG_INSTALL

dnl Checks for programs.
AC_PROG_RANLIB
DX_PROG_CXX
DX_PROG_CXXCPP
DX_PROG_CC
DX_PROG_CPP
AC_CYGWIN
DX_EXEEXT
if test -z "$EXEEXT" ; then
	DOT_EXE_EXT="";
	else
	DOT_EXE_EXT=".$EXEEXT";
fi
DX_OBJEXT

if test "$ARCH" = "intelnt" ; then
	DX_CHECK_HEADERS(windows.h)
else
	ac_cv_header_windows_h="no"
fi

# Code to enable JAVADX to be built
if test "$with_javadx" != 'no'; then
  failed=0;
  passed=0;
  DX_PROG_JAVAC(passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  DX_PROG_JAR(passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  DX_PROG_JAVAH(passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  DX_PATH_JAVA

dnl The following determines if we have the necessary compilers, etc. then look to
dnl see if we can find the jni headers. First look to see if a configure flag sent
dnl this in. If not, look to see if an environment varaible was set. If not, 
dnl use the javac -verbose code to try and determine where they may be.

  if test $failed -eq 0 ; then
    if test -z "$with_jni_path" ; then
      if test -z "$JNIPATH" ; then
        DX_FIND_JNI(passed=`expr $passed + 1`,failed=`expr $failed + 1`)
      else
        DX_FIND_JNI_WITH_PATH($JNIPATH,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
      fi
    else
      DX_FIND_JNI_WITH_PATH($with_jni_path,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    fi
  fi

  if test $failed -gt 0; then
    with_javadx='no'
    AC_MSG_WARN(JavaDX will be skipped during compilation due to limitations.)
  else
    with_javadx='yes'
    JAVABRANCH=java
    DX_FIND_JDK_CLASSES
    JDK_CLASSPATH="$ac_cv_jdk_classes"
    if test -z "$with_java40jar_path" ; then
      if test -z "$JAVA40JAR" ; then
        DX_FIND_DEFAULT_NETSCAPE
      else
        DX_FIND_NETSCAPE($JAVA40JAR)
      fi
    else
      DX_FIND_NETSCAPE($with_java40jar_path)
    fi
    if test -z "$with_cosmojar_path" ; then
      if test -z "$COSMOJAR" ; then
        DX_FIND_DEFAULT_COSMO
      else
        DX_FIND_COSMO($COSMOJAR)
      fi
    else
      DX_FIND_COSMO($with_cosmojar_path)
    fi
    WRL_CLASSPATH="$ac_cv_class_netscape"
    if test -n "$ac_cv_class_cosmo" ; then
      WRL_CLASSPATH="$ac_cv_class_netscape:$ac_cv_class_cosmo"
    fi
  fi

fi
# end of JAVADX configure

AC_LANG_C

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

if test "$CYGWIN" = yes || test "$MINGW32" = yes ; then
    ANYDX=AnyDX.dll
else
    ANYDX=libAnyDX.so
fi

AC_LANG_C

DX_CYGWIN_MOUNTS
DX_SET_RTL_FLAGS
AC_CHECK_LIB(gen, regex)
AC_CHECK_LIB(REXP, regcomp)
AC_CHECK_LIB(pthread, pthread_getspecific)

dnl Check of X related files and set up include directories

AC_PATH_X
if test "$x_includes" != "" ; then
    CFLAGS="$CFLAGS -I$x_includes"
    CXXFLAGS="$CXXFLAGS -I$x_includes"
    CPPFLAGS="$CPPFLAGS -I$x_includes"
fi
if test "$x_libraries" != "" ; then
    LIBS="-L$x_libraries $LIBS"
fi

AC_CHECK_LIB(ICE, IceConnectionNumber)
AC_CHECK_LIB(SM, SmcSetProperties)
AC_CHECK_LIB(xlib, XCreateWindow)
AC_CHECK_LIB(xt, XtVaGetValues)
AC_CHECK_LIB(xlibcon, HCLXlibInit)
AC_CHECK_LIB(xmstatxt, XtVaGetValues)
AC_CHECK_LIB(xmstatic, XmStringFree)
AC_CHECK_LIB(xm, XmStringFree)
AC_CHECK_LIB(hclglx, glXGetConfig)


AC_CHECK_LIB(X11, XCreateGC)
AC_CHECK_LIB(Xt, XtMalloc)
AC_CHECK_LIB(Xext, XextAddDisplay)
AC_CHECK_LIB(m, sqrt)
AC_CHECK_LIB(GL, glXGetConfig)

DX_PATH_XM
if test "$xm_includes" != "" ; then
    CFLAGS="$CFLAGS -I$xm_includes"
    CXXFLAGS="$CXXFLAGS -I$xm_includes"
    CPPFLAGS="$CPPFLAGS -I$xm_includes"
fi
if test "$xm_libraries" != "" ; then
    LIBS="-L$xm_libraries $LIBS"
fi
AC_CHECK_LIB(Xp, XpSetImageResolution)
AC_CHECK_LIB(Xm, XmGetDestination)
AC_CHECK_LIB(Xm, HCLXmInit, AC_DEFINE(HAVE_HCLXMINIT))
AC_CHECK_LIB(Xt, HCLXtInit, AC_DEFINE(HAVE_HCLXTINIT))

dnl want to put the Xmu tests in before here!!
DX_X_LINK_LIBS="$LIBS"

dnl The following is set up to check for the old LessTif libraries
dnl
AC_TRY_LINK([
#include <Xm/FormP.h>
],
[
XmFormConstraintPart *p;
p->att[0].type;
],
,
[
    AC_DEFINE_UNQUOTED(OLD_LESSTIF, 1)
    echo "using old version of  LESSTIF"
])

if test "$ARCH" = "solaris" ; then
    OLDLIBS=$LIBS
    LIBS="-L/usr/openwin/lib $LIBS"
    AC_CHECK_LIB(dga, dga_draw_devfd, 
    [
      LIBS="$LIBS -ldga"
      AC_CHECK_LIB(Xmu, XmuAddInitializer, LIBS="$LIBS -lXmu")
    ], LIBS=$OLDLIBS, -lX11)
fi

dnl A couple libs for cygwin
AC_CHECK_LIB(ICE, IceConnectionNumber)
AC_CHECK_LIB(SM, SmcSetProperties)
AC_CHECK_LIB(REXP, regcomp)
dnl I guess this is not obsolete ;)
DX_CHECK_TGMATH
AC_CHECK_LIB(m, sqrt)

dnl If buildlibdx off then pass this down to the Makefile
AM_CONDITIONAL(WITH_BUILDLIBDX, test $with_buildlibdx = 'yes') 
dnl If install html off then pass this to its Makefile
AM_CONDITIONAL(WITH_INSTALLHTML, test $with_installhtml = 'yes') 

dnl Check for ImageMagick Libraries

dnl Checks for libraries.
AC_CHECK_LIB(g++, main)
AC_CHECK_LIB(dl, main)

# Check for Sfio
#

have_sfio='no'
LIB_SFIO=''
if test "$with_sfio" != 'no'
then
    AC_CHECKING(for SFIO support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(stdio.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(sfio,_stdopen,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_CHECK_LIB(stdio,vprintf,passed=`expr $passed + 1`,failed=`expr $failed + 1`,-lsfio)
    AC_MSG_CHECKING(f SFIO package is complete)
    if test $passed -gt 0
    then
	if test $failed -gt 0
	then
	    AC_MSG_RESULT(no -- some components failed test)
	    have_sfio='no (failed tests)'
	else
	    LIB_SFIO='-lstdio -lsfio'
	    LIBS="$LIB_SFIO $LIBS"
	    FMT_LIBS="$FMT_LIBS libstdio.a libsfio.a"
	    AC_DEFINE(HAVE_LIBSFIO)
	    AC_MSG_RESULT(yes)
	    have_sfio='yes'
	fi
    else
	AC_MSG_RESULT(no)
    fi
fi


#
# Check for ZLIB
#
have_zlib='no'
dnl PNG requires zlib so enable zlib check if PNG is requested
if test "$with_zlib" != 'no' || test "$with_png" != 'no'
then
  LIB_ZLIB=''
  AC_CHECKING(for ZLIB support ...)
  failed=0;
  passed=0;
  AC_CHECK_HEADER(zconf.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  AC_CHECK_HEADER(zlib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  AC_CHECK_LIB(z,compress,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_CHECK_LIB(z,uncompress,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_CHECK_LIB(z,deflate,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_CHECK_LIB(z,inflate,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_MSG_CHECKING(if ZLIB package is complete)
  if test $passed -gt 0
  then
    if test $failed -gt 0
    then
      AC_MSG_RESULT(no -- some components failed test)
      have_zlib='no (failed tests)'
    else
      LIB_ZLIB='-lz'
      LIBS="$LIB_ZLIB $LIBS"
      FMT_LIBS="$FMT_LIBS libz.a"
      AC_DEFINE(HAVE_LIBZ)
      AC_MSG_RESULT(yes)
      have_zlib='yes'
    fi
  else
    AC_MSG_RESULT(no)
  fi
fi

#
# Check for BZLIB
#
have_bzlib='no'
if test "$with_bzlib" != 'no'
then
  LIB_BZLIB=''
  AC_CHECKING(for BZLIB support ...)
  failed=0;
  passed=0;
  AC_CHECK_HEADER(bzlib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
  AC_CHECK_LIB(bz2,bzBuffToBuffCompress,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_CHECK_LIB(bz2,bzBuffToBuffDecompress,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
  AC_MSG_CHECKING(if BZLIB package is complete)
  if test $passed -gt 0
  then
    if test $failed -gt 0
    then
      AC_MSG_RESULT(no -- some components failed test)
      have_bzlib='no (failed tests)'
    else
      LIB_BZLIB='-lbz2'
      LIBS="$LIB_BZLIB $LIBS"
      FMT_LIBS="$FMT_LIBS libbz2.a"
      AC_DEFINE(HAVE_LIBBZLIB)
      AC_MSG_RESULT(yes)
      have_bzlib='yes'
    fi
  else
    AC_MSG_RESULT(no)
  fi
fi

#
# Check for Display Postscript
#
have_dps='no'
LIB_DPS=''
if test "$with_dps" != 'no' && test "$with_x" != 'no'
then
    AC_CHECKING([for Display Postscript support ...])
    failed=0;
    passed=0;
    O_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS -I${ac_x_includes}/X11"
    AC_CHECK_HEADER(DPS/dpsXclient.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_HEADER(DPS/dpsXpreview.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(dps,DPSInitialize,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_CHECK_LIB(dpstk,XDPSPixelsPerPoint,passed=`expr $passed + 1`,failed=`expr $failed + 1`,-ldps)
    AC_MSG_CHECKING(if DPS package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT([no -- some components failed test])
        have_dps='no (failed tests)'
	CPPFLAGS="$O_CPPFLAGS"
    else
	LIB_DPS='-ldpstk -ldps'
	LIBS="$LIB_DPS $LIBS"
	FMT_LIBS="$FMT_LIBS libdpstk.a libdps.a"
	AC_DEFINE(HAVE_LIBDPS)
	AC_MSG_RESULT(yes)
	have_dps='yes'
    fi
    else
    AC_MSG_RESULT(no)
    CPPFLAGS=$O_CPPFLAGS
    fi
fi


#
# Check for FlashPIX
#
have_fpx='no'
LIB_FPX=''
if test "$with_fpx" != 'no'
then
    AC_CHECKING(for FlashPIX components ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(fpx.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(fpx,FPX_OpenImageByFilename,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if FlashPIX package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
	have_fpx='no (failed tests)'
    else
	LIB_FPX='-lfpx'
	LIBS="$LIB_FPX $LIBS"
	FMT_LIBS="$FMT_LIBS libfpx.a"
	AC_DEFINE(HAVE_LIBFPX)
	AC_MSG_RESULT(yes)
        have_fpx='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi

#
# Check for PNG
#
have_png='no'
LIB_PNG=''
if test "$with_png" != 'no'
then
    AC_CHECKING(for PNG support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(png.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_CHECK_HEADER(pngconf.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_CHECK_LIB(png,png_info_init,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if PNG package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
	have_png='no (failed tests)'
    else
	LIB_PNG='-lpng'
	LIBS="$LIB_PNG $LIBS"
	FMT_LIBS="$FMT_LIBS libpng.a"
	AC_DEFINE(HAVE_LIBPNG)
	AC_MSG_RESULT(yes)
	have_png='yes'
    fi
    else
    AC_MSG_RESULT(no)
    fi
fi

#
# Check for JPEG
#
have_jpeg='no'
LIB_JPEG=''
if test "$with_jpeg" != 'no'
then
    AC_CHECKING(for JPEG support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(jconfig.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_HEADER(jerror.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_HEADER(jmorecfg.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_HEADER(jpeglib.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(jpeg,jpeg_read_header,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if JPEG package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_jpeg='no (failed tests)'
    else
	LIB_JPEG='-ljpeg'
	LIBS="$LIB_JPEG $LIBS"
	FMT_LIBS="$FMT_LIBS libjpeg.a"
	AC_DEFINE(HAVE_LIBJPEG)
	AC_MSG_RESULT(yes)
        have_jpeg='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi

#
# Check for TTF
#
have_ttf='no'
LIB_TTF=''
if test "$with_ttf" != 'no'
then
    AC_CHECKING(for TrueType Font support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(freetype.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(ttf,TT_Init_FreeType,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if FreeType package is complete)
    if test $passed -gt 0
    then
	if test $failed -gt 0
	then
	    AC_MSG_RESULT(no -- some components failed test)
	    have_ttf='no (failed tests)'
	else
	    LIB_TTF='-lttf'
	    LIBS="$LIB_TTF $LIBS"
	    FMT_LIBS="$FMT_LIBS libttf.a"
	    AC_DEFINE(HAVE_LIBTTF)
	    AC_MSG_RESULT(yes)
	    have_ttf='yes'
	fi
    else
	AC_MSG_RESULT(no)
    fi
fi

#
# Check for TIFF
#
have_tiff='no'
LIB_TIFF=''
if test "$with_tiff" != 'no'
then
    AC_CHECKING(for TIFF support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(tiff.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_HEADER(tiffio.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(tiff,TIFFOpen,passed=`expr $passed + 1`,failed=`expr $failed + 1`, [ -lm ] )
    AC_MSG_CHECKING(if TIFF package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
	have_tiff='no (failed tests)'
    else
	LIB_TIFF='-ltiff'
	LIBS="$LIB_TIFF $LIBS"
	FMT_LIBS="$FMT_LIBS libtiff.a"
	AC_DEFINE(HAVE_LIBTIFF)
	AC_MSG_RESULT(yes)
	have_tiff='yes'
    fi
    else
    AC_MSG_RESULT(no)
    fi
fi


#
# Check for HDF
#
have_hdf='no'
LIB_HDF=''
if test "$with_hdf" != 'no'
then
    AC_CHECKING(for HDF components ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADERS(hdf.h hdf/hdf.h)
    if test "$ac_cv_header_hdf_h" = 'yes' -o "ac_cv_header_hdf_hdf_h" = 'yes'
    then
    	passed=`expr $passed + 1`
    else
    	failed=`expr $failed + 1`
    fi
    AC_CHECK_LIB(df,Hopen,passed=`expr $passed + 1`,failed=`expr $failed + 1`,[ -lz -ljpeg ])
    AC_MSG_CHECKING(if HDF package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_hdf='no (failed tests)'
    else
	LIB_HDF='-ldf'
	LIBS="$LIB_HDF $LIBS"
	FMT_LIBS="$FMT_LIBS libdf.a"
	AC_DEFINE(HAVE_LIBDF)
	AC_MSG_RESULT(yes)
	have_hdf='yes'
    fi
    else
    AC_MSG_RESULT(no)
    fi
fi

#
# Check for JBIG
#
have_jbig='no'
LIB_JBIG=''
if test "$with_jbig" != 'no'
then
    AC_CHECKING(for JBIG support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(jbig.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(jbig,jbg_dec_init,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if JBIG package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_jbig='no (failed tests)'
    else
	LIB_JBIG='-ljbig'
	LIBS="$LIB_JBIG $LIBS"
	FMT_LIBS="$FMT_LIBS libjbig.a"
	AC_DEFINE(HAVE_LIBJBIG)
	AC_MSG_RESULT(yes)
        have_jbig='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi


#
# Check for CDF
#
have_cdf='no'
LIB_CDF=''
if test "$with_cdf" != 'no'
then
    AC_CHECKING(for CDF support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(cdf.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(cdf,CDFlib,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if CDF package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_cdf='no (failed tests)'
    else
	LIB_CDF='-lcdf'
	LIBS="$LIB_CDF $LIBS"
	FMT_LIBS="$FMT_LIBS libcdf.a"
	AC_DEFINE(HAVE_LIBCDF)
	AC_MSG_RESULT(yes)
        have_cdf='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi


#
# Check for NETCDF
#
have_netcdf='no'
LIB_NETCDF=''
if test "$with_netcdf" != 'no'
then
    AC_CHECKING(for NETCDF support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(netcdf.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB(netcdf,free_NC_attr,passed=`expr $passed + 1`,failed=`expr $failed + 1`,)
    AC_MSG_CHECKING(if NETCDF package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_netcdf='no (failed tests)'
    else
	LIB_NETCDF='-lnetcdf'
	LIBS="$LIB_NETCDF $LIBS"
	FMT_LIBS="$FMT_LIBS libnetcdf.a"
	AC_DEFINE(HAVE_LIBNETCDF)
	AC_MSG_RESULT(yes)
        have_netcdf='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi


#
# Check for IMAGEMAGICK
#
have_magick='no'
LIB_MAGICK=''
if test "$with_magick" != 'no'
then
    AC_CHECKING(for ImageMagick support ...)
    failed=0;
    passed=0;
    AC_CHECK_HEADER(magick/magick.h,passed=`expr $passed + 1`,failed=`expr $failed + 1`)
    AC_CHECK_LIB( Magick,GetImageInfo, passed=`expr $passed + 1`, failed=`expr $failed + 1`,
       [ -lm -lX11 -lXext ])
    AC_MSG_CHECKING(if ImageMagick package is complete)
    if test $passed -gt 0
    then
    if test $failed -gt 0
    then
	AC_MSG_RESULT(no -- some components failed test)
        have_magick='no (failed tests)'
    else
	LIB_MAGICK='-lMagick'
	LIBS="$LIB_MAGICK $LIBS"
	FMT_LIBS="$FMT_LIBS libMagick.a"
	AC_DEFINE(HAVE_LIBMAGICK)
	AC_MSG_RESULT(yes)
        have_netcdf='yes'
    fi
    else
        AC_MSG_RESULT(no)
    fi
fi

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_FUNCS(getdtablesize)
AC_LANG_RESTORE

AC_CHECK_FUNCS(getcwd gethostname gettimeofday mkdir mkfifo mktime \
	putenv re_comp regcmp select socket strcspn strdup strerror \
	strspn strstr strtod strtol strtoul uname popen vfork trunc \
        _popen spawnvp _spawnvp regcomp sysmp sysconf \
        pipe _pipe _popen popen _pclose pclose random rand srandom \
	getopt srand opendir fork _findfirst strrstr strcasecmp \
	stricmp getpid _getpid unlink _unlink getlogin isatty _isatty)

AC_EGREP_HEADER(SIGBUS, signal.h, AC_DEFINE(HAVE_SIGBUS))
AC_EGREP_HEADER(SIGKILL, signal.h, AC_DEFINE(HAVE_SIGKILL))
AC_EGREP_HEADER(SIGDANGER, signal.h, AC_DEFINE(HAVE_SIGDANGER))
AC_EGREP_HEADER(SIGPIPE, signal.h, AC_DEFINE(HAVE_SIGPIPE))

AC_TRY_COMPILE(
[],
[extern char *getenv(const char *);],
AC_DEFINE_UNQUOTED(GETENV_ARG, const char *),
AC_DEFINE_UNQUOTED(GETENV_ARG, char *))

AC_TRY_LINK(
[
#include <sys/systemcfg.h>
],
[
int n = _system_configuration.ncpus;
],
[
AC_DEFINE_UNQUOTED(HAVE_SYSCONFIG_NCPUS)
])

AC_EGREP_HEADER(sys_errlist, sys/errno.h,  AC_DEFINE(HAVE_SYS_ERRLIST))
AC_EGREP_HEADER(sys_errlist, errno.h,      AC_DEFINE(HAVE_SYS_ERRLIST))
AC_EGREP_HEADER(sys_errlist, stdio.h,      AC_DEFINE(HAVE_SYS_ERRLIST))
AC_EGREP_HEADER(_sys_errlist, sys/errno.h, AC_DEFINE(HAVE__SYS_ERRLIST))
AC_EGREP_HEADER(_sys_errlist, errno.h,     AC_DEFINE(HAVE__SYS_ERRLIST))
AC_EGREP_HEADER(_sys_errlist, stdio.h,     AC_DEFINE(HAVE__SYS_ERRLIST))

dnl Check yaccer.  Don't use standard AQC_PROG_YACC... We're going
dnl to create an -D as well as the make variable
AC_CHECK_PROG(yakker, bison, "bison", "yacc")
if test "$yakker" = "bison" ; then
    AC_DEFINE(USING_BISON)
    YACC="bison -y"
else
    YACC=yacc
fi


AC_LANG_C
DX_CHECK_HEADERS(DPS/XDPSlib.h DPS/dpsXclient.h \
    DPS/psops.h GL/gl.h GL/glx.h Mrm/MrmPubli.h X11/Composite.h \
    X11/CompositeP.h X11/Constraint.h X11/CoreP.h X11/Intrinsic.h \
    X11/IntrinsicI.h X11/IntrinsicP.h X11/Protocols.h X11/Shell.h \
    X11/StringDefs.h X11/X.h X11/XHPlib.h X11/Xatom.h X11/Xlib.h \
    X11/XlibXtra.h X11/Xmu/Editres.h X11/Xos.h X11/Xutil.h X11/cursorfont.h \
    X11/keysym.h X11/keysymdef.h Xm/ArrowB.h Xm/ArrowBG.h Xm/AtomMgr.h \
    Xm/BulletinB.h Xm/BulletinBP.h Xm/CascadeB.h Xm/CascadeBG.h Xm/Command.h \
    Xm/CutPaste.h Xm/DialogS.h Xm/DragC.h Xm/DragDrop.h Xm/DrawingA.h \
    Xm/DrawingAP.h Xm/DrawnB.h Xm/FileSB.h Xm/Form.h Xm/FormP.h Xm/Frame.h \
    Xm/FrameP.h Xm/GadgetP.h Xm/Label.h Xm/LabelG.h Xm/LabelGP.h Xm/LabelP.h \
    Xm/List.h Xm/MainW.h Xm/ManagerP.h Xm/MenuShell.h Xm/MessageB.h \
    Xm/MwmUtil.h Xm/PanedW.h Xm/PrimitiveP.h Xm/Protocols.h Xm/PushB.h \
    Xm/PushBG.h Xm/PushBP.h Xm/RepType.h Xm/RowColumn.h Xm/Scale.h \
    Xm/ScrollBar.h Xm/ScrolledW.h Xm/ScrolledWP.h Xm/SelectioB.h Xm/SeparatoG.h \
    Xm/SeparatoGP.h Xm/Separator.h Xm/Text.h Xm/TextF.h Xm/ToggleB.h \
    Xm/ToggleBG.h Xm/Xm.h Xm/XmP.h Xm/XmStrDefs.h alloca.h arpa/inet.h \
    bstring.h cdf.h conio.h crypt.h ctype.h cygwin/socket.h dfsd.h \
    direct.h dirent.h dl.h dlfcn.h errno.h fcntl.h float.h fstream.h \
    get.h gl.h gl/device.h gl/gl.h invent.h io.h iop/afb.h iop/mov.h \
    iop/pfs.h iostream.h license.h limits.h malloc.h math.h memory.h \
    mingw32/dir.h mon.h net/if.h net/if_arp.h net/route.h netcdf.h netdb.h \
    netinet/in.h os2.h process.h pwd.h regexp.h setjmp.h signal.h \
    starbase.c.h stdarg.h stddef.h stdio.h stdlib.h stream.h string.h \
    strings.h synch.h sys/access.h sys/bsd_types.h \
    sys/file.h sys/filio.h sys/ioctl.h sys/ipc.h sys/ldr.h sys/m88kbcs.h \
    sys/m_wait.h sys/mman.h sys/mode.h sys/param.h sys/pstat.h sys/resource.h \
    sys/select.h sys/shm.h sys/signal.h sys/socket.h sys/stat.h sys/svs.h \
    sys/syslimits.h sys/sysmacros.h sys/sysmp.h sys/sysconfig.h \
    sys/errno.h sys/systemcfg.h \
    sys/systeminfo.h sys/time.h sys/timeb.h sys/times.h sys/types.h sys/un.h \
    sys/utsname.h sys/wait.h sysent.h time.h types.h ulocks.h unistd.h \
    values.h wait.h x11/xlibxtra.h xgl/xgl.h linux/kernel.h linux/sys.h)

if test "$ARCH" = "intelnt" ; then
    DX_CHECK_HEADERS(winbase.h wingdi.h winioctl.h winsock.h)
fi

DX_CHECK_STAT

AC_LANG_CPLUSPLUS
DX_CHECK_HEADERS(CC/libc.h CC/osfcn.h strstrea.h strstream.h)

AC_LANG_C

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, inet_addr)

DX_STREAM_O2

AC_LANG_CPLUSPLUS

AC_TRY_LINK([
#include <unistd.h>
], [
char buf[32];
gethostname(buf, 32);
],
AC_DEFINE_UNQUOTED(REQUIRES_GETHOSTNAME_DECLARATION, 0),
AC_DEFINE_UNQUOTED(REQUIRES_GETHOSTNAME_DECLARATION, 1))

AC_TRY_LINK([
#include <strings.h>
], [
char buf[32];
bzero(buf, (size_t)32);
],
AC_DEFINE_UNQUOTED(REQUIRES_BZERO_DECLARATION, 0),
AC_DEFINE_UNQUOTED(REQUIRES_BZERO_DECLARATION, 1))

DX_HEADER_HAS_SYMBOL(math.h, M_PI)
DX_HEADER_HAS_SYMBOL(math.h, M_SQRT2)
DX_HEADER_HAS_SYMBOL(sys/stat.h sys/mode.h, S_ISDIR)
DX_HEADER_HAS_SYMBOL(sys/sysmp.h, sysmp)

AC_LANG_C

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_VFORK
AC_FUNC_VPRINTF

DX_CHECK_TYPE(uint, unsigned int)
DX_CHECK_TYPE(byte, char)
DX_CHECK_TYPE(ubyte, unsigned char)
DX_CHECK_TYPE(short, short)
DX_CHECK_TYPE(ushort, unsigned short)
DX_CHECK_TYPE(ulong, unsigned long)
DX_CHECK_TYPE(int8, char)
DX_CHECK_TYPE(uint8, unsigned char)
DX_CHECK_TYPE(int16, short)
DX_CHECK_TYPE(uint16, unsigned short)
DX_CHECK_TYPE(int32, int)
DX_CHECK_TYPE(uint32, unsigned int)
DX_CHECK_TYPE(int64, long)
DX_CHECK_TYPE(float64, double)

if test "$ARCH" != "intelnt" ; then
    DX_CHECK_TYPE(__int64, long long)
    DX_CHECK_TYPE(uint64, unsigned long)
    DX_CHECK_TYPE(float32, float)
fi

AC_C_BIGENDIAN

AC_LANG_CPLUSPLUS

AC_TRY_LINK(
[
#include <signal.h>
extern "C" void foo(int bar, ...){}
],
[
signal(SIGBUS, foo);
],
[
echo Using alternate signal argument list in C++
AC_DEFINE_UNQUOTED(ALTERNATE_CXX_SIGNAL)
],
[
echo Using standard signal argument list in C++
])

AC_LANG_C

DX_CHECK_SELECT_ARG
DX_CHECK_SOCK_LENGTH_TYPE

DX_NEEDS_STDCXX

dnl since we statically link the hw-dependent renderer dxexec links need GL
DX_GL_LINK_LIBS=" -lGL "

AC_OUTPUT(
	Makefile \
	bin/Makefile \
	bin/dx
	bin/dxworker \
	bin/mdf2c \
	doc/Makefile \
	fonts/Makefile \
	help/Makefile \
	html/Makefile \
	include/Makefile \
	include/dx/Makefile \
	lib/Makefile \
	man/Makefile \
	man/catl/Makefile \
	man/manl/Makefile \
	src/Makefile \
	src/exec/Makefile \
	src/exec/dpexec/Makefile \
	src/exec/dxexec/Makefile \
	src/exec/dxmods/Makefile \
	src/exec/hwrender/Makefile \
	src/exec/hwrender/gl/Makefile \
	src/exec/hwrender/opengl/Makefile \
	src/exec/hwrender/starbase/Makefile \
	src/exec/hwrender/xgl/Makefile  \
	src/exec/libdx/Makefile \
	src/exec/libdx/local.mk \
	src/misc/Makefile \
	src/misc/arch.mak \
	src/uipp/Makefile \
	src/uipp/base/Makefile \
	src/uipp/dxl/Makefile \
	src/uipp/dxui/Makefile \
	src/uipp/dxuilib/Makefile \
	src/uipp/java/Makefile \
	src/uipp/java/dx/Makefile \
	src/uipp/java/dx/protocol/Makefile \
	src/uipp/java/dx/protocol/server/Makefile \
	src/uipp/java/dx/runtime/Makefile \
	src/uipp/java/server/Makefile \
	src/uipp/java/server/macros/Makefile \
	src/uipp/java/server/dxserver.paths \
	src/uipp/java/server/startserver \
	src/uipp/java/dx/client/Makefile \
	src/uipp/java/dx/net/Makefile \
	src/uipp/mb/Makefile \
	src/uipp/prompter/Makefile \
	src/uipp/startup/Makefile \
	src/uipp/tutor/Makefile \
	src/uipp/ui/Makefile \
	src/uipp/ui/Makefile \
	src/uipp/widgets/Makefile 
	windows/Makefile
)
